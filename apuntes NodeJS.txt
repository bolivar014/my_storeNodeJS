[*] Variables de ejecución externas al archivo local NodeJS.
    NOMBREVAR1=VAL1 WEB=VAL2 node conceptos/entorno.js
    EJM: NOMBRE=Pepito WEB=loquesea.com node conceptos/entorno.js

[*] NODEMON | HERRAMIENTA que detecta cada cambio realizado en el proyecto, de inmediato vuelte a compilar.
    PM2 | HERRAMIENTA que permite el capturar todo tipo de error de ejecución a modo logs y restablece su uso.

    instalar:
        npm install -g nodemon // -g instruccion para instalar globalmente
        npm install -g pm2

    ejecutar nodemon:
        nodemon ruta/archivo.js

        ejemplo:
            nodemon Conceptos/monohilos.js

    ejecutar pm2:
        pm2 start ruta/archivo.js

    Consultar STATUS pm2:
        pm2 status

    Consultar logs
        pm2 logs

    Pausar proceso pm2
        pm2 stop

[*] NODE-GYP | HERRAMIENTA que nos permite compilar librerias de C++
    INSTALAR:
        npm i -g node-gyp

    Configurar NODE-GYP:
        node-gyp configure

[*] Ejecutar modulos experimentales.
    node --experimental-modules index.mjs

[*] Crear package.json
    npm init -y

[*] Instalar paquete bcrypt | Libreria de cifrado
    npm i bcrypt

[*] Instalar paquete moment | Libreria de fechas
    npm install moment

[*] Instalar paquete sharp | Libreria que nos permite trabajar con imagenes en C++...
    npm i sharp

[*] función: pipe()
    la función pipe se utiliza para mandar desde un sitio a otro

[*] Debugger NodeJS
    node --inspect modulos/http.js

[*] Inspeccionador de Chrome
    chrome://inspect/#devices

[*] https://www.toptal.com/developers/gitignore |
        Pagina que notifica archivos necesario a excluir en el gitignore

[*] Es neceario tener
      Editor Config for VS Code

[*] Instalación de dependencias de desarrollo
      npm i nodemon eslint eslint-config-prettier eslint-plugin-prettier pritter -D
      npm i nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier -D

[*] Pasos de configuración
      Crear carpeta del proyecto
      Inicializar proyecto con npm
      Inicializar git
      Crear archivos de configuración
      Crear archivo index.js
      Crear scripts dentro del package.json
      Instalar dependencias
      Probar entornos desde los scripts npm

[*] Instalación de ExpressJS
    npm install express

[*] DEFINICIÓN:
    REST: Representational State Transfer

    Es una conveccion que se refiere a servicios web por protocolo HTTP

    Metodos:

        Get: Obtener
        Put: Modificar/Actualizar
        Patch: Modificar/Actualizar
        Post: Crear
        Delete: Eliminar

    Patch

    El método de solicitud HTTP PATCH aplica modificaciones parciales a un recurso.

    PATCH es algo análogo al concepto de “actualización” que se encuentra en CRUD, Una solicitud se considera un conjunto de instrucciones sobre cómo modificar un recurso. Contrasta esto con PUT; que es una representación completa de un recurso.PATCH

    Mo es necesariamente idempotente, aunque puede serlo. Contrasta esto con PUT; que siempre es idempotente.

    La palabra “idempotente” significa que cualquier número de solicitudes repetidas e idénticas dejará el recurso en el mismo estado.

    Por ejemplo, si un campo de contador de incremento automático es una parte integral del recurso, entonces un PUT lo sobrescribirá naturalmente (ya que sobrescribe todo), pero no necesariamente para .PATCH

    PATCH (como POST) puede tener efectos secundarios sobre otros recursos.

    PATCH - HTTP | MDN

[*] Faker | libreria - Dependencia para generar datos falsos
    npm install faker  ó npm i --save-dev faker@5.5.3

[*] HTTP - CAT
      https://http.cat/

[*] Manejo de errores | BOOM
    INSTALACION: npm i @hapi/boom

[*] Libreria Validacion de datos | Libreria joi
    INSTALACION: npm i joi

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]

[*]
